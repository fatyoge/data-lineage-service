{
  "swagger": "2.0",
  "info": {
    "description": "Data lineage Service APIs",
    "version": "1.0.0",
    "title": "Data Lineage Service"
  },
  "host": "datalineage-viewer.azurewebsites.net",
  "basePath": "/api",
  "tags": [
    {
      "name": "Read",
      "description": "Read data lineage info from tangle"
    },
    {
      "name": "Write",
      "description": "Write data lineage info to tangle"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/address/{address}/{all}": {
      "get": {
        "tags": [
          "Read"
        ],
        "summary": "Get lineage information from a MAM address",
        "description": "Get lineage information from a MAM address. \n To improve the performance, it always check the cache before query the tangle.Data is cached for two days by default.",
        "operationId": "getByAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "MAM address that contains data lineage information",
            "required": true,
            "type": "string"
          },
          {
            "name": "all",
            "in": "path",
            "description": "Optional, determine if the API should return the whole data lineage. \n If \"all\" is provided, it loads the data lineage information from the specified address, **plus** it loads all upper stream address information **recursively** from inputs field. \n If \"all\" is ignored, it **only** loads data lineage information from the specified MAM address. It is a \"lazy load\" that does not load information from inputs field.",
            "required": false,
            "type": "string",
            "example":"all"
          }
        ],
        "responses": {
          "200": {
            "description": "successful loaded the information from the specified address"
          },
          "404": {
            "description": "Information is not found from the address"
          }
        }
      }
    },
    "/address/channel/{rootAddress}": {
      "get": {
        "tags": ["Read"],
        "summary": "Get all data lineage information from channel, by specifying the start root address in that channel",
        "description": "Get all data lineage information from channel, by specifying the start root address in that channel",
        "operationId": "getPackagesFromChannel",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "rootAddress",
            "in": "path",
            "description": "The start root address in the channel",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully loaded packages from the channel"
          },
          "404": {
            "description": "Missing the root address"
          }
        }
      }
    },
    "/publish" : {
      "post" : {
        "tags" : [ "Write" ],
        "summary" : "publish data lineage information",
        "description" : "Publish data lineage information into tangle. It verifies the schema, then publish to tangle without any modification.",
        "operationId" : "PublishLineageInfo",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ 
          {
            "name": "seed",
            "in": "header",
            "description": "In order to write into a channel, we must provide the private seed of that channel. If it is a new seed, a new channel will be created.",
            "required": true,
            "type": "string",
            "example":"YMWCOSQBLSRYNVAIJURFCVWVGMFCS9UTMQEZMUZKNG9HWOV9BLQIARPEUTOHTDRKWFJDJMJYIWJTBJEDJ"
          },
          {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
              "$ref": "#/definitions/DatalineageInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The data lineage info was published successfully.",
            "schema" : {
                "$ref": "#/definitions/ReturnedDataLineageInfoWithAddress"
              }
            },
            "400" : {
              "description" : "The data lineage info object has an invalid schema."
            },
            "500" : {
              "description" : "Publish failed due to internal error."
            }
          }
        }
      }
    },
  "definitions" : {
    "DatalineageInfo" : {
      "type" : "object",
      "required" : [ "dataPackageId", "wayOfProof","valueOfProof" ],
      "properties" : {
        "dataPackageId": {
          "type": "string",
          "description": "Data package ID. This ID will be used for querying the data lineage info from the channel. Data source decides the ID format, such as integer or GUID. Different channels can have the same package ID.",
          "example": "123456"
        },
        "wayOfProof" : {
          "type" : "string",
          "description" : "This field describes how to verify the integrity based on valueOfProof. For example, it explains the used hash algorithms (SHA1 or SHA2 or others), or it simply copied the data package content into field valueOfProof.",
          "example" : "SHA256(packageId, original-data-content, timestamp)"
        },
        "valueOfProof" : {
          "type" : "string",
          "description" : "The value of the proof, such as hash value, or the copy of the data content in clear text.",
          "example":"8c20f3d24...43a6cfb7c4"
        },
        "inputs": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The current package might have inputs. If yes, all input package addresses are provided in an array."  
          },
          "example":["MAM_address_1", "MAM_address_2"]
        }
      },
      "additionalProperties":{
        "type":"string"
      }
    },
    "ReturnedDataLineageInfoWithAddress" : {
      "allOf":[
        {
         "$ref": "#/definitions/DatalineageInfo"
        },
        {
          "type":"object",
          "properties":{
            "mamAddress": {
              "type": "number",
              "description": "MAM address of the submitted data",
              "example":"QKT9J...XPGLYV"
            },
            "nextRootAddress": {
              "type": "number",
              "description": "The next MAM address in the channel",
              "example":"OTZDS...HB9WE9K"
            }
          }
        }]     
    }
  }
}
